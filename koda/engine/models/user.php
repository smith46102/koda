<?php

namespace Models;

/*
	User model - works with users
*/

class User extends \App\Model {


	public static function getTable()
	{
		return 'users';
	}

	public static function describe()
	{
		return [
			'id',
			'email',
			'password',
			'cookie',
			'name',
			'created',
			'workspace',
			'photo',
			'position',
			'about',
			'phone',
			'skype',
			'deleted',
			'sex',			// male | female
			'lastIP',
			'lastVisit'
		];
	}


	/**
	 * Checks errors before save
	 *
	 * @return boolean
	 */
	protected function checkErrors()
	{
		$this -> errors = [];
		if (!$this -> name)
			$this -> errors['name'] = 'Имя не задано';
		if (!$this -> email)
			$this -> errors['email'] = 'Email не задан';
		if (!preg_match('/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}/', $this -> email))
			$this -> errors['email'] = 'Некорректный email';

		$sameEmailUser = static :: findOne(['email' => $this -> email]);
		if ($sameEmailUser and ($sameEmailUser -> id != $this -> id)) {
			$this -> errors[] = 'Пользователь с таким email уже существует';
		}

		return count($this -> errors) == 0;
	}


	/**
	 * Check errors before saving
	 * Update last online and cookie hash
	 *
	 * @return boolean
	 */
	protected function beforeSave()
	{
		if (!$this -> checkErrors())
			return false;

		if (!$this -> id) {
			$this -> created = \App\Timer :: now();
		}

		$this -> makeCookieHash();
		return true;
	}


	/**
	 * Make password hash from input string
	 * and save it to user model
	 *
	 * @param string $pass
	 * @return boolean
	 */
	public function savePassword($pass)
	{
		if ($this -> id) {
			$this -> password = static :: hashPassword($pass);
			return $this -> save(['password']);
		}
		return false;
	}


	/**
	 * Make password hash from input password
	 *
	 * @param string $pass
	 * @return string
	 */
	public static function hashPassword($pass)
	{
		$salt = 'zcx0-asdW[^&56';
		return md5(md5($pass) . $salt);
	}


	/**
	 * Makes hash from User's email, password, lastIP
	 * this hash used to setup user's auth cookie
	 *
	 * @return string
	 */
	public function makeCookieHash()
	{
		if ($this -> email) {
			$salt = 'xzpow782*A&Ssapo^&#}{';
			$this -> cookie = md5(md5($this -> email . $this -> password . $this -> lastIP) . $salt);
		}
	}


	/**
	 * Find user by cookie hash
	 *
	 * @param string $hash
	 * @param string $ip
	 * @return \Models\User
	 */
	public static function findByCookie($hash, $ip)
	{
		return static :: findOne(['cookie' => $hash, 'lastIP' => $ip]);
	}


	/**
	 * Find user by email and password
	 *
	 * @param string $email
	 * @param string $pass
	 * @return \Models\User
	 */
	public static function findByEmailPassword($email, $pass)
	{
		$email = trim($email);
		$pass = static :: hashPassword($pass);

		if ($email !== '' && $pass !== '') {
			return static :: findOne([
				'email' => $email,
				'password' => $pass
			]);
		}
		return null;
	}


	/**
	 * Get user's workspace
	 *
	 * @return \Models\Workspace
	 */
	public function getWorkspace()
	{
		if ($this -> workspace) {
			return Workspace :: get($this -> workspace);
		}
		return null;
	}


	/**
	 * Get projects, followed by this user
	 *
	 * @return \App\Collection of \Models\Project
	 */
	public function getProjects()
	{
		if ($this -> id) {
			$key = '{' . $this -> id . '}';
			return Project :: find(['followers LIKE' => '%' . $key . '%'], 'lastUpdate DESC');
		}
		return null;
	}


	/**
	 * Get messages, generated by this user, with pagination
	 *
	 * @param int $limit - size of pagination chunk
	 * @param int $page - number of page
	 * @param int $totalFound - returns total found messages count
	 * @return \App\Collection of \Models\Message
	 */
	public function getActivities($limit = 0, $page = 1, &$totalFound = 0)
	{
		if ($this -> id) {
			return Message :: getUserActivities($this -> id, $limit, $page, $totalFound);
		}
		return null;
	}


	/**
	 * Get messages, unread by this user
	 *
	 * @param int $limit - size of pagination chunk
	 * @param int $page - number of page
	 * @param int $totalFound - returns total found messages count
	 * @return \App\Collection of \Models\Message
	 */
	public function getUnreadMessages($limit = 0, $page = 1, &$totalFound = 0)
	{
		if ($this -> id) {
			return Message :: getUserUnreadMessages($this -> id, $limit, $page, $totalFound);
		}
		return null;
	}


	/**
	 * Gets users unread messages count
	 *
	 * @return int
	 */
	public function getUnreadMessagesCount()
	{
		if ($this -> id) {
			return Message :: count(['unread LIKE' => "%" . $this -> id . "%"]);
		}
		return 0;
	}


	/**
	 * Get active tasks count
	 *
	 * @return int
	 */
	public function getActiveTasksCount()
	{
		if ($this -> id) {
			$activeStatus = ['new', 'in-progress'];
			return Task :: count(['assignee' => $this -> id, 'status' => $activeStatus]);
		}
		return 0;
	}


	/**
	 * Get initials for user-avatar
	 *
	 * @return string
	 */
	public function getInitials()
	{
		if ($this -> name) {
			$parts = array_slice(explode(' ', $this -> name), 0, 2);
			foreach ($parts as $i => $p) {
				$parts[$i] = mb_substr($p, 0, 1);
			}
			return implode('', $parts);
		}
		return null;
	}


	/**
	 * Returns true if this user is same as the logined user
	 *
	 * @return boolean
	 */
	public function getCanEdit()
	{
		return $this -> id == \App\User :: $id;
	}


	/**
	 * Returns true if this user can be removed from team
	 *
	 * @return boolean
	 */
	public function getCanRemoveFromTeam()
	{
		$workspace = $this -> _workspace;
		if ($workspace and $workspace -> _canEdit and $workspace -> owner != $this -> id) {
			return true;
		}
		return false;
	}


	/**
	 * Returns true if this user in same workspace as logined user
	 *
	 * @return boolean
	 */
	public function getInMyWorkspace()
	{
		return $this -> workspace == \App\User :: $model -> workspace;
	}


	/**
	 * Gets string to search user in input fields with autocomplete
	 *
	 * @return string
	 */
	public function getSearchString()
	{
		if ($this -> id) {
			return $this -> name . ' ' . $this -> email . ' ' . $this -> position;
		}
		return '';
	}

}